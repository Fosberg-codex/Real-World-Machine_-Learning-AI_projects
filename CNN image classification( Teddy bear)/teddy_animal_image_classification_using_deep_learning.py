# -*- coding: utf-8 -*-
"""Teddy-animal Image classification using deep learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17TYTnGcVFd2TrlJpBB9y-7iqYP0BFSB4

**Importing fastbook and its setups**
"""

#hide
! [ -e /content ] && pip install -Uqq fastbook
import fastbook
fastbook.setup_book()

"""**Loading Grizzly bear picture**"""

from fastbook import *
urls = search_images_ddg('grizzly bear', max_images=150)
len(urls),urls[0]

dest = 'images/bear.jpg'
download_url(urls[0], dest)

im = Image.open(dest)
im.thumbnail((256,256))
im

"""**Saving all the pics in different categories ie bear_types**"""

path = Path('bears')
path.mkdir(exist_ok=True)

bear_types = 'grizzly','black','teddy'

for e in bear_types:
  dest = path/e
  dest.mkdir(exist_ok=True)
  bear_images_urls = search_images_ddg(f'{e} bear')
  download_images(dest, urls = bear_images_urls)

fns = get_image_files(path)
fns

"""**Acessiing and deleting the saved pics**"""

failed = verify_images(fns)
failed

failed.map(Path.unlink);

"""###**Setting up with data loaders**
we have the ImageBlock being the indedependent variable and the dependent variable beng the CategoryBlock
and also the *validation percentage set is 0.2*
"""

bears = DataBlock(
    blocks=(ImageBlock, CategoryBlock), 
    get_items=get_image_files, 
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

dls = bears.dataloaders(path)

dls.valid.show_batch(max_n=4, nrows=1)

bears = bears.new(item_tfms=Resize(128, ResizeMethod.Squish))
dls = bears.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

"""###Training my model_bear classiffier (And using it to train our model)"""

bears = bears.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = bears.dataloaders(path)

"""###Create our learner and fine tune(CNN learner)"""

learn = vision_learner(dls, resnet18, metrics=error_rate)
learn.fine_tune(4)

"""###Comfusion matrix"""

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

"""### Top losses(Predict-Actual-loss-Probality)"""

interp.plot_top_losses(5, nrows=1)

"""**Installing fast AI and useful libraries**"""

!pip install fastai

from fastai.vision.widgets import *

#hide_output
cleaner = ImageClassifierCleaner(learn)
cleaner

"""###**Predicting and deploying**

**Turning Your Model into an Online Application**

### Using the Model for Inference
"""

learn.export()

path = Path()
path.ls(file_exts='.pkl')

learn_inf = load_learner(path/'export.pkl')

"""###predicting if the category of an animal in a pic"""

learn_inf.predict('/content/71qVVUAINNL._AC_SL1000_.jpg')

"""**Our targets which will always be predicted*"""

learn_inf.dls.vocab